// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decimate_strm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        strm_out_V_din,
        strm_out_V_full_n,
        strm_out_V_write,
        strm_in_V_dout,
        strm_in_V_empty_n,
        strm_in_V_read,
        strm_len
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_pp0_stage0 = 3'b10;
parameter    ap_ST_fsm_state4 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv34_0 = 34'b0000000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv14_1 = 14'b1;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_21 = 32'b100001;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] strm_out_V_din;
input   strm_out_V_full_n;
output   strm_out_V_write;
input  [31:0] strm_in_V_dout;
input   strm_in_V_empty_n;
output   strm_in_V_read;
input  [13:0] strm_len;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_out_V_write;
reg strm_in_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    strm_out_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_5_i_reg_253;
reg    strm_in_V_blk_n;
reg   [0:0] exitcond_flatten_reg_239;
reg   [13:0] indvar_flatten_reg_117;
reg   [2:0] j_i_reg_128;
reg   [33:0] acc_i_reg_139;
wire   [13:0] tmp_8_fu_161_p3;
reg   [13:0] tmp_8_reg_234;
wire   [0:0] exitcond_flatten_fu_169_p2;
reg    ap_condition_74;
wire   [13:0] indvar_flatten_next_fu_174_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_3_i3_fu_180_p2;
reg   [0:0] tmp_3_i3_reg_248;
wire   [0:0] tmp_5_i_fu_194_p2;
wire   [2:0] j_fu_200_p2;
wire   [33:0] acc_fu_217_p2;
wire   [11:0] tmp_7_fu_151_p4;
wire   [2:0] j_i_mid2_fu_186_p3;
wire  signed [33:0] tmp_4_cast_i_fu_213_p1;
wire   [33:0] acc_i_mid2_fu_206_p3;
wire   [0:0] ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)) & ~(1'b0 == exitcond_flatten_fu_169_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)) & (1'b0 == exitcond_flatten_fu_169_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)) & ~(1'b0 == exitcond_flatten_fu_169_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_239) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)))) begin
        acc_i_reg_139 <= acc_fu_217_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        acc_i_reg_139 <= ap_const_lv34_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_169_p2))) begin
        indvar_flatten_reg_117 <= indvar_flatten_next_fu_174_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        indvar_flatten_reg_117 <= ap_const_lv14_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_169_p2))) begin
        j_i_reg_128 <= j_fu_200_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        j_i_reg_128 <= ap_const_lv3_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)))) begin
        exitcond_flatten_reg_239 <= exitcond_flatten_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)) & (1'b0 == exitcond_flatten_fu_169_p2))) begin
        tmp_3_i3_reg_248 <= tmp_3_i3_fu_180_p2;
        tmp_5_i_reg_253 <= tmp_5_i_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        tmp_8_reg_234[13 : 2] <= tmp_8_fu_161_p3[13 : 2];
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_239))) begin
        strm_in_V_blk_n = strm_in_V_empty_n;
    end else begin
        strm_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_239) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)))) begin
        strm_in_V_read = 1'b1;
    end else begin
        strm_in_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(tmp_5_i_reg_253 == 1'b0))) begin
        strm_out_V_blk_n = strm_out_V_full_n;
    end else begin
        strm_out_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(tmp_5_i_reg_253 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)))) begin
        strm_out_V_write = 1'b1;
    end else begin
        strm_out_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~(~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_169_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_74 == 1'b1)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_169_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_217_p2 = ($signed(tmp_4_cast_i_fu_213_p1) + $signed(acc_i_mid2_fu_206_p3));

assign acc_i_mid2_fu_206_p3 = ((tmp_3_i3_reg_248[0:0] === 1'b1) ? ap_const_lv34_0 : acc_i_reg_139);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_2];

always @ (*) begin
    ap_condition_74 = (((1'b0 == exitcond_flatten_reg_239) & (strm_in_V_empty_n == 1'b0)) | (~(tmp_5_i_reg_253 == 1'b0) & (strm_out_V_full_n == 1'b0)));
end

assign exitcond_flatten_fu_169_p2 = ((indvar_flatten_reg_117 == tmp_8_reg_234) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_174_p2 = (indvar_flatten_reg_117 + ap_const_lv14_1);

assign j_fu_200_p2 = (j_i_mid2_fu_186_p3 + ap_const_lv3_1);

assign j_i_mid2_fu_186_p3 = ((tmp_3_i3_fu_180_p2[0:0] === 1'b1) ? ap_const_lv3_0 : j_i_reg_128);

assign strm_out_V_din = {{acc_fu_217_p2[ap_const_lv32_21 : ap_const_lv32_2]}};

assign tmp_3_i3_fu_180_p2 = ((j_i_reg_128 == ap_const_lv3_4) ? 1'b1 : 1'b0);

assign tmp_4_cast_i_fu_213_p1 = $signed(strm_in_V_dout);

assign tmp_5_i_fu_194_p2 = ((j_i_mid2_fu_186_p3 == ap_const_lv3_3) ? 1'b1 : 1'b0);

assign tmp_7_fu_151_p4 = {{strm_len[ap_const_lv32_D : ap_const_lv32_2]}};

assign tmp_8_fu_161_p3 = {{tmp_7_fu_151_p4}, {ap_const_lv2_0}};

always @ (posedge ap_clk) begin
    tmp_8_reg_234[1:0] <= 2'b00;
end

endmodule //decimate_strm
