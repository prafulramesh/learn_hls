// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _apint_arith_HH_
#define _apint_arith_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "apint_arith_srem_bkb.h"
#include "apint_arith_sdiv_cud.h"
#include "apint_arith_mul_mdEe.h"

namespace ap_rtl {

struct apint_arith : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<6> > inA;
    sc_in< sc_lv<12> > inB;
    sc_in< sc_lv<22> > inC;
    sc_in< sc_lv<33> > inD;
    sc_out< sc_lv<18> > out1;
    sc_out< sc_logic > out1_ap_vld;
    sc_out< sc_lv<13> > out2;
    sc_out< sc_logic > out2_ap_vld;
    sc_out< sc_lv<22> > out3;
    sc_out< sc_logic > out3_ap_vld;
    sc_out< sc_lv<6> > out4;
    sc_out< sc_logic > out4_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    apint_arith(sc_module_name name);
    SC_HAS_PROCESS(apint_arith);

    ~apint_arith();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    apint_arith_srem_bkb<1,37,33,6,6>* apint_arith_srem_bkb_U1;
    apint_arith_sdiv_cud<1,26,22,6,22>* apint_arith_sdiv_cud_U2;
    apint_arith_mul_mdEe<1,3,12,6,18>* apint_arith_mul_mdEe_U3;
    sc_signal< sc_lv<37> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<18> > grp_fu_136_p2;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<22> > grp_fu_124_p2;
    sc_signal< sc_logic > ap_CS_fsm_state37;
    sc_signal< sc_lv<13> > tmp_3_fu_107_p1;
    sc_signal< sc_lv<13> > tmp_4_fu_111_p1;
    sc_signal< sc_lv<6> > grp_fu_94_p2;
    sc_signal< sc_logic > grp_fu_94_ap_start;
    sc_signal< sc_logic > grp_fu_94_ap_done;
    sc_signal< sc_logic > grp_fu_124_ap_start;
    sc_signal< sc_logic > grp_fu_124_ap_done;
    sc_signal< sc_lv<37> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<37> ap_ST_fsm_state1;
    static const sc_lv<37> ap_ST_fsm_state2;
    static const sc_lv<37> ap_ST_fsm_state3;
    static const sc_lv<37> ap_ST_fsm_state4;
    static const sc_lv<37> ap_ST_fsm_state5;
    static const sc_lv<37> ap_ST_fsm_state6;
    static const sc_lv<37> ap_ST_fsm_state7;
    static const sc_lv<37> ap_ST_fsm_state8;
    static const sc_lv<37> ap_ST_fsm_state9;
    static const sc_lv<37> ap_ST_fsm_state10;
    static const sc_lv<37> ap_ST_fsm_state11;
    static const sc_lv<37> ap_ST_fsm_state12;
    static const sc_lv<37> ap_ST_fsm_state13;
    static const sc_lv<37> ap_ST_fsm_state14;
    static const sc_lv<37> ap_ST_fsm_state15;
    static const sc_lv<37> ap_ST_fsm_state16;
    static const sc_lv<37> ap_ST_fsm_state17;
    static const sc_lv<37> ap_ST_fsm_state18;
    static const sc_lv<37> ap_ST_fsm_state19;
    static const sc_lv<37> ap_ST_fsm_state20;
    static const sc_lv<37> ap_ST_fsm_state21;
    static const sc_lv<37> ap_ST_fsm_state22;
    static const sc_lv<37> ap_ST_fsm_state23;
    static const sc_lv<37> ap_ST_fsm_state24;
    static const sc_lv<37> ap_ST_fsm_state25;
    static const sc_lv<37> ap_ST_fsm_state26;
    static const sc_lv<37> ap_ST_fsm_state27;
    static const sc_lv<37> ap_ST_fsm_state28;
    static const sc_lv<37> ap_ST_fsm_state29;
    static const sc_lv<37> ap_ST_fsm_state30;
    static const sc_lv<37> ap_ST_fsm_state31;
    static const sc_lv<37> ap_ST_fsm_state32;
    static const sc_lv<37> ap_ST_fsm_state33;
    static const sc_lv<37> ap_ST_fsm_state34;
    static const sc_lv<37> ap_ST_fsm_state35;
    static const sc_lv<37> ap_ST_fsm_state36;
    static const sc_lv<37> ap_ST_fsm_state37;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_24;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state37();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_fu_124_ap_start();
    void thread_grp_fu_94_ap_start();
    void thread_out1();
    void thread_out1_ap_vld();
    void thread_out2();
    void thread_out2_ap_vld();
    void thread_out3();
    void thread_out3_ap_vld();
    void thread_out4();
    void thread_out4_ap_vld();
    void thread_tmp_3_fu_107_p1();
    void thread_tmp_4_fu_111_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
