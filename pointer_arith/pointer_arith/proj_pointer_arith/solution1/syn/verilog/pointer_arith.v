// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pointer_arith,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=25,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=224,HLS_SYN_LUT=113}" *)

module pointer_arith (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_req_din,
        d_req_full_n,
        d_req_write,
        d_rsp_empty_n,
        d_rsp_read,
        d_address,
        d_datain,
        d_dataout,
        d_size
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   d_req_din;
input   d_req_full_n;
output   d_req_write;
input   d_rsp_empty_n;
output   d_rsp_read;
output  [31:0] d_address;
input  [31:0] d_datain;
output  [31:0] d_dataout;
output  [31:0] d_size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg d_req_din;
reg d_req_write;
reg d_rsp_read;
reg[31:0] d_address;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] acc;
wire   [2:0] i_1_fu_72_p2;
reg   [2:0] i_1_reg_117;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [31:0] d_addr_read_reg_129;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_1_fu_92_p2;
reg   [31:0] tmp_1_reg_134;
wire    ap_CS_fsm_state6;
reg   [2:0] i_reg_54;
wire    ap_CS_fsm_state7;
wire   [63:0] p_sum_cast_fu_78_p1;
wire   [63:0] tmp_fu_103_p1;
wire   [0:0] exitcond_fu_66_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 acc = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (d_req_full_n == 1'b1))) begin
        i_reg_54 <= i_1_reg_117;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_54 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        acc <= tmp_1_fu_92_p2;
        tmp_1_reg_134 <= tmp_1_fu_92_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (d_rsp_empty_n == 1'b1))) begin
        d_addr_read_reg_129 <= d_datain;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_117 <= i_1_fu_72_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_66_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_66_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (d_req_full_n == 1'b1))) begin
        d_address = tmp_fu_103_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_address = p_sum_cast_fu_78_p1;
    end else begin
        d_address = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (d_req_full_n == 1'b1))) begin
        d_req_din = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_req_din = 1'b0;
    end else begin
        d_req_din = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state7) & (d_req_full_n == 1'b1)))) begin
        d_req_write = 1'b1;
    end else begin
        d_req_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (d_rsp_empty_n == 1'b1))) begin
        d_rsp_read = 1'b1;
    end else begin
        d_rsp_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_66_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (d_rsp_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (d_req_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign d_dataout = tmp_1_reg_134;

assign d_size = 32'd1;

assign exitcond_fu_66_p2 = ((i_reg_54 == 3'd4) ? 1'b1 : 1'b0);

assign i_1_fu_72_p2 = (i_reg_54 + 3'd1);

assign p_sum_cast_fu_78_p1 = i_1_reg_117;

assign tmp_1_fu_92_p2 = (d_addr_read_reg_129 + acc);

assign tmp_fu_103_p1 = i_reg_54;

endmodule //pointer_arith
