// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pointer_arith.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pointer_arith::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pointer_arith::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> pointer_arith::ap_ST_fsm_state1 = "1";
const sc_lv<7> pointer_arith::ap_ST_fsm_state2 = "10";
const sc_lv<7> pointer_arith::ap_ST_fsm_state3 = "100";
const sc_lv<7> pointer_arith::ap_ST_fsm_state4 = "1000";
const sc_lv<7> pointer_arith::ap_ST_fsm_state5 = "10000";
const sc_lv<7> pointer_arith::ap_ST_fsm_state6 = "100000";
const sc_lv<7> pointer_arith::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> pointer_arith::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> pointer_arith::ap_const_lv32_1 = "1";
const sc_lv<32> pointer_arith::ap_const_lv32_2 = "10";
const sc_lv<32> pointer_arith::ap_const_lv32_4 = "100";
const sc_lv<32> pointer_arith::ap_const_lv32_5 = "101";
const sc_lv<3> pointer_arith::ap_const_lv3_0 = "000";
const sc_lv<32> pointer_arith::ap_const_lv32_6 = "110";
const sc_lv<3> pointer_arith::ap_const_lv3_4 = "100";
const sc_lv<3> pointer_arith::ap_const_lv3_1 = "1";
const sc_lv<1> pointer_arith::ap_const_lv1_1 = "1";
const bool pointer_arith::ap_const_boolean_1 = true;

pointer_arith::pointer_arith(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_66_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_66_p2 );

    SC_METHOD(thread_d_address);
    sensitive << ( d_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( p_sum_cast_fu_78_p1 );
    sensitive << ( tmp_fu_103_p1 );

    SC_METHOD(thread_d_dataout);
    sensitive << ( d_req_full_n );
    sensitive << ( tmp_1_reg_134 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_d_req_din);
    sensitive << ( d_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_d_req_write);
    sensitive << ( d_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_d_rsp_read);
    sensitive << ( d_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_d_size);
    sensitive << ( d_req_full_n );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_exitcond_fu_66_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_54 );

    SC_METHOD(thread_i_1_fu_72_p2);
    sensitive << ( i_reg_54 );

    SC_METHOD(thread_p_sum_cast_fu_78_p1);
    sensitive << ( i_1_reg_117 );

    SC_METHOD(thread_tmp_1_fu_92_p2);
    sensitive << ( acc );
    sensitive << ( d_addr_read_reg_129 );

    SC_METHOD(thread_tmp_fu_103_p1);
    sensitive << ( i_reg_54 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( d_req_full_n );
    sensitive << ( d_rsp_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( exitcond_fu_66_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    acc = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pointer_arith_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, d_req_din, "(port)d_req_din");
    sc_trace(mVcdFile, d_req_full_n, "(port)d_req_full_n");
    sc_trace(mVcdFile, d_req_write, "(port)d_req_write");
    sc_trace(mVcdFile, d_rsp_empty_n, "(port)d_rsp_empty_n");
    sc_trace(mVcdFile, d_rsp_read, "(port)d_rsp_read");
    sc_trace(mVcdFile, d_address, "(port)d_address");
    sc_trace(mVcdFile, d_datain, "(port)d_datain");
    sc_trace(mVcdFile, d_dataout, "(port)d_dataout");
    sc_trace(mVcdFile, d_size, "(port)d_size");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, acc, "acc");
    sc_trace(mVcdFile, i_1_fu_72_p2, "i_1_fu_72_p2");
    sc_trace(mVcdFile, i_1_reg_117, "i_1_reg_117");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, d_addr_read_reg_129, "d_addr_read_reg_129");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_1_fu_92_p2, "tmp_1_fu_92_p2");
    sc_trace(mVcdFile, tmp_1_reg_134, "tmp_1_reg_134");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, i_reg_54, "i_reg_54");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, p_sum_cast_fu_78_p1, "p_sum_cast_fu_78_p1");
    sc_trace(mVcdFile, tmp_fu_103_p1, "tmp_fu_103_p1");
    sc_trace(mVcdFile, exitcond_fu_66_p2, "exitcond_fu_66_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("pointer_arith.hdltvin.dat");
    mHdltvoutHandle.open("pointer_arith.hdltvout.dat");
}

pointer_arith::~pointer_arith() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void pointer_arith::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(d_req_full_n.read(), ap_const_logic_1))) {
        i_reg_54 = i_1_reg_117.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_54 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        acc = tmp_1_fu_92_p2.read();
        tmp_1_reg_134 = tmp_1_fu_92_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(d_rsp_empty_n.read(), ap_const_logic_1))) {
        d_addr_read_reg_129 = d_datain.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_1_reg_117 = i_1_fu_72_p2.read();
    }
}

void pointer_arith::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void pointer_arith::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void pointer_arith::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void pointer_arith::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void pointer_arith::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void pointer_arith::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void pointer_arith::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_66_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void pointer_arith::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void pointer_arith::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_66_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void pointer_arith::thread_d_address() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(d_req_full_n.read(), ap_const_logic_1))) {
        d_address =  (sc_lv<32>) (tmp_fu_103_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        d_address =  (sc_lv<32>) (p_sum_cast_fu_78_p1.read());
    } else {
        d_address = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void pointer_arith::thread_d_dataout() {
    d_dataout = tmp_1_reg_134.read();
}

void pointer_arith::thread_d_req_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(d_req_full_n.read(), ap_const_logic_1))) {
        d_req_din = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        d_req_din = ap_const_logic_0;
    } else {
        d_req_din = ap_const_logic_0;
    }
}

void pointer_arith::thread_d_req_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(d_req_full_n.read(), ap_const_logic_1)))) {
        d_req_write = ap_const_logic_1;
    } else {
        d_req_write = ap_const_logic_0;
    }
}

void pointer_arith::thread_d_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(d_rsp_empty_n.read(), ap_const_logic_1))) {
        d_rsp_read = ap_const_logic_1;
    } else {
        d_rsp_read = ap_const_logic_0;
    }
}

void pointer_arith::thread_d_size() {
    d_size = ap_const_lv32_1;
}

void pointer_arith::thread_exitcond_fu_66_p2() {
    exitcond_fu_66_p2 = (!i_reg_54.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_54.read() == ap_const_lv3_4);
}

void pointer_arith::thread_i_1_fu_72_p2() {
    i_1_fu_72_p2 = (!i_reg_54.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_54.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void pointer_arith::thread_p_sum_cast_fu_78_p1() {
    p_sum_cast_fu_78_p1 = esl_zext<64,3>(i_1_reg_117.read());
}

void pointer_arith::thread_tmp_1_fu_92_p2() {
    tmp_1_fu_92_p2 = (!d_addr_read_reg_129.read().is_01() || !acc.read().is_01())? sc_lv<32>(): (sc_biguint<32>(d_addr_read_reg_129.read()) + sc_biguint<32>(acc.read()));
}

void pointer_arith::thread_tmp_fu_103_p1() {
    tmp_fu_103_p1 = esl_zext<64,3>(i_reg_54.read());
}

void pointer_arith::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_66_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(d_rsp_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(d_req_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void pointer_arith::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_req_din\" :  \"" << d_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_req_full_n\" :  \"" << d_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_req_write\" :  \"" << d_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_rsp_empty_n\" :  \"" << d_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_rsp_read\" :  \"" << d_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_address\" :  \"" << d_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_datain\" :  \"" << d_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_dataout\" :  \"" << d_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_size\" :  \"" << d_size.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

