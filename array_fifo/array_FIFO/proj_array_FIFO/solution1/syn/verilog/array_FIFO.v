// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="array_FIFO,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.850000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=19,HLS_SYN_LUT=55}" *)

module array_FIFO (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_o_din,
        d_o_full_n,
        d_o_write,
        d_i_dout,
        d_i_empty_n,
        d_i_read,
        idx_address0,
        idx_ce0,
        idx_we0,
        idx_d0,
        idx_q0,
        idx_address1,
        idx_ce1,
        idx_we1,
        idx_d1,
        idx_q1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] d_o_din;
input   d_o_full_n;
output   d_o_write;
input  [31:0] d_i_dout;
input   d_i_empty_n;
output   d_i_read;
output  [1:0] idx_address0;
output   idx_ce0;
output   idx_we0;
output  [31:0] idx_d0;
input  [31:0] idx_q0;
output  [1:0] idx_address1;
output   idx_ce1;
output   idx_we1;
output  [31:0] idx_d1;
input  [31:0] idx_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg d_o_write;
reg d_i_read;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    d_o_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_63_p2;
reg    d_i_blk_n;
wire   [2:0] i_1_fu_69_p2;
reg    ap_block_state2;
reg   [2:0] i_reg_52;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_63_p2 == 1'd0) & ~(((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_i_empty_n)) | ((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_o_full_n))))) begin
        i_reg_52 <= i_1_fu_69_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_52 <= 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_i_empty_n)) | ((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_o_full_n))) & (exitcond_fu_63_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_i_empty_n)) | ((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_o_full_n))) & (exitcond_fu_63_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_63_p2 == 1'd0))) begin
        d_i_blk_n = d_i_empty_n;
    end else begin
        d_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_63_p2 == 1'd0) & ~(((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_i_empty_n)) | ((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_o_full_n))))) begin
        d_i_read = 1'b1;
    end else begin
        d_i_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_63_p2 == 1'd0))) begin
        d_o_blk_n = d_o_full_n;
    end else begin
        d_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_63_p2 == 1'd0) & ~(((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_i_empty_n)) | ((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_o_full_n))))) begin
        d_o_write = 1'b1;
    end else begin
        d_o_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ~(((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_i_empty_n)) | ((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_o_full_n))) & (exitcond_fu_63_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_63_p2 == 1'd0) & ~(((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_i_empty_n)) | ((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_o_full_n))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2 = (((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_i_empty_n)) | ((exitcond_fu_63_p2 == 1'd0) & (1'b0 == d_o_full_n)));
end

assign d_o_din = d_i_dout;

assign exitcond_fu_63_p2 = ((i_reg_52 == 3'd4) ? 1'b1 : 1'b0);

assign i_1_fu_69_p2 = (i_reg_52 + 3'd1);

assign idx_address0 = 2'd0;

assign idx_address1 = 2'd0;

assign idx_ce0 = 1'b0;

assign idx_ce1 = 1'b0;

assign idx_d0 = 32'd0;

assign idx_d1 = 32'd0;

assign idx_we0 = 1'b0;

assign idx_we1 = 1'b0;

endmodule //array_FIFO
