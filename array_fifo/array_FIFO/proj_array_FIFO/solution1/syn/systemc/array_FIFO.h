// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _array_FIFO_HH_
#define _array_FIFO_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct array_FIFO : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > d_o_din;
    sc_in< sc_logic > d_o_full_n;
    sc_out< sc_logic > d_o_write;
    sc_in< sc_lv<32> > d_i_dout;
    sc_in< sc_logic > d_i_empty_n;
    sc_out< sc_logic > d_i_read;
    sc_out< sc_lv<2> > idx_address0;
    sc_out< sc_logic > idx_ce0;
    sc_out< sc_logic > idx_we0;
    sc_out< sc_lv<32> > idx_d0;
    sc_in< sc_lv<32> > idx_q0;
    sc_out< sc_lv<2> > idx_address1;
    sc_out< sc_logic > idx_ce1;
    sc_out< sc_logic > idx_we1;
    sc_out< sc_lv<32> > idx_d1;
    sc_in< sc_lv<32> > idx_q1;


    // Module declarations
    array_FIFO(sc_module_name name);
    SC_HAS_PROCESS(array_FIFO);

    ~array_FIFO();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > d_o_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_63_p2;
    sc_signal< sc_logic > d_i_blk_n;
    sc_signal< sc_lv<3> > i_1_fu_69_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<3> > i_reg_52;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_d_i_blk_n();
    void thread_d_i_read();
    void thread_d_o_blk_n();
    void thread_d_o_din();
    void thread_d_o_write();
    void thread_exitcond_fu_63_p2();
    void thread_i_1_fu_69_p2();
    void thread_idx_address0();
    void thread_idx_address1();
    void thread_idx_ce0();
    void thread_idx_ce1();
    void thread_idx_d0();
    void thread_idx_d1();
    void thread_idx_we0();
    void thread_idx_we1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
