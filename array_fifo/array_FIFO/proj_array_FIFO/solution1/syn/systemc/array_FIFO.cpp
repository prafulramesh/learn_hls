// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "array_FIFO.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic array_FIFO::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic array_FIFO::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> array_FIFO::ap_ST_fsm_state1 = "1";
const sc_lv<2> array_FIFO::ap_ST_fsm_state2 = "10";
const sc_lv<32> array_FIFO::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> array_FIFO::ap_const_lv32_1 = "1";
const sc_lv<1> array_FIFO::ap_const_lv1_0 = "0";
const sc_lv<3> array_FIFO::ap_const_lv3_0 = "000";
const sc_lv<3> array_FIFO::ap_const_lv3_4 = "100";
const sc_lv<3> array_FIFO::ap_const_lv3_1 = "1";
const sc_lv<1> array_FIFO::ap_const_lv1_1 = "1";
const sc_lv<2> array_FIFO::ap_const_lv2_0 = "00";
const bool array_FIFO::ap_const_boolean_1 = true;

array_FIFO::array_FIFO(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( d_o_full_n );
    sensitive << ( d_i_empty_n );
    sensitive << ( exitcond_fu_63_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( d_o_full_n );
    sensitive << ( d_i_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_63_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( d_o_full_n );
    sensitive << ( d_i_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_63_p2 );

    SC_METHOD(thread_d_i_blk_n);
    sensitive << ( d_i_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_63_p2 );

    SC_METHOD(thread_d_i_read);
    sensitive << ( d_o_full_n );
    sensitive << ( d_i_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_63_p2 );

    SC_METHOD(thread_d_o_blk_n);
    sensitive << ( d_o_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_63_p2 );

    SC_METHOD(thread_d_o_din);
    sensitive << ( d_o_full_n );
    sensitive << ( d_i_dout );
    sensitive << ( d_i_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_63_p2 );

    SC_METHOD(thread_d_o_write);
    sensitive << ( d_o_full_n );
    sensitive << ( d_i_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_63_p2 );

    SC_METHOD(thread_exitcond_fu_63_p2);
    sensitive << ( d_o_full_n );
    sensitive << ( d_i_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_63_p2 );
    sensitive << ( i_reg_52 );

    SC_METHOD(thread_i_1_fu_69_p2);
    sensitive << ( i_reg_52 );

    SC_METHOD(thread_idx_address0);

    SC_METHOD(thread_idx_address1);

    SC_METHOD(thread_idx_ce0);

    SC_METHOD(thread_idx_ce1);

    SC_METHOD(thread_idx_d0);

    SC_METHOD(thread_idx_d1);

    SC_METHOD(thread_idx_we0);

    SC_METHOD(thread_idx_we1);

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( d_o_full_n );
    sensitive << ( d_i_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_63_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "array_FIFO_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, d_o_din, "(port)d_o_din");
    sc_trace(mVcdFile, d_o_full_n, "(port)d_o_full_n");
    sc_trace(mVcdFile, d_o_write, "(port)d_o_write");
    sc_trace(mVcdFile, d_i_dout, "(port)d_i_dout");
    sc_trace(mVcdFile, d_i_empty_n, "(port)d_i_empty_n");
    sc_trace(mVcdFile, d_i_read, "(port)d_i_read");
    sc_trace(mVcdFile, idx_address0, "(port)idx_address0");
    sc_trace(mVcdFile, idx_ce0, "(port)idx_ce0");
    sc_trace(mVcdFile, idx_we0, "(port)idx_we0");
    sc_trace(mVcdFile, idx_d0, "(port)idx_d0");
    sc_trace(mVcdFile, idx_q0, "(port)idx_q0");
    sc_trace(mVcdFile, idx_address1, "(port)idx_address1");
    sc_trace(mVcdFile, idx_ce1, "(port)idx_ce1");
    sc_trace(mVcdFile, idx_we1, "(port)idx_we1");
    sc_trace(mVcdFile, idx_d1, "(port)idx_d1");
    sc_trace(mVcdFile, idx_q1, "(port)idx_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, d_o_blk_n, "d_o_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_63_p2, "exitcond_fu_63_p2");
    sc_trace(mVcdFile, d_i_blk_n, "d_i_blk_n");
    sc_trace(mVcdFile, i_1_fu_69_p2, "i_1_fu_69_p2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, i_reg_52, "i_reg_52");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("array_FIFO.hdltvin.dat");
    mHdltvoutHandle.open("array_FIFO.hdltvout.dat");
}

array_FIFO::~array_FIFO() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void array_FIFO::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_i_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_o_full_n.read()))))) {
        i_reg_52 = i_1_fu_69_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_52 = ap_const_lv3_0;
    }
}

void array_FIFO::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void array_FIFO::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void array_FIFO::thread_ap_block_state2() {
    ap_block_state2 = ((esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_i_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_o_full_n.read())));
}

void array_FIFO::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_i_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_o_full_n.read()))) && 
         esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void array_FIFO::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void array_FIFO::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_i_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_o_full_n.read()))) && 
         esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void array_FIFO::thread_d_i_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0))) {
        d_i_blk_n = d_i_empty_n.read();
    } else {
        d_i_blk_n = ap_const_logic_1;
    }
}

void array_FIFO::thread_d_i_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_i_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_o_full_n.read()))))) {
        d_i_read = ap_const_logic_1;
    } else {
        d_i_read = ap_const_logic_0;
    }
}

void array_FIFO::thread_d_o_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0))) {
        d_o_blk_n = d_o_full_n.read();
    } else {
        d_o_blk_n = ap_const_logic_1;
    }
}

void array_FIFO::thread_d_o_din() {
    d_o_din = d_i_dout.read();
}

void array_FIFO::thread_d_o_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
         !((esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_i_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_o_full_n.read()))))) {
        d_o_write = ap_const_logic_1;
    } else {
        d_o_write = ap_const_logic_0;
    }
}

void array_FIFO::thread_exitcond_fu_63_p2() {
    exitcond_fu_63_p2 = (!i_reg_52.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_52.read() == ap_const_lv3_4);
}

void array_FIFO::thread_i_1_fu_69_p2() {
    i_1_fu_69_p2 = (!i_reg_52.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_52.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void array_FIFO::thread_idx_address0() {
    idx_address0 = ap_const_lv2_0;
}

void array_FIFO::thread_idx_address1() {
    idx_address1 = ap_const_lv2_0;
}

void array_FIFO::thread_idx_ce0() {
    idx_ce0 = ap_const_logic_0;
}

void array_FIFO::thread_idx_ce1() {
    idx_ce1 = ap_const_logic_0;
}

void array_FIFO::thread_idx_d0() {
    idx_d0 = ap_const_lv32_0;
}

void array_FIFO::thread_idx_d1() {
    idx_d1 = ap_const_lv32_0;
}

void array_FIFO::thread_idx_we0() {
    idx_we0 = ap_const_logic_0;
}

void array_FIFO::thread_idx_we1() {
    idx_we1 = ap_const_logic_0;
}

void array_FIFO::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_i_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_o_full_n.read()))) && esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && !((esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_i_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_fu_63_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, d_o_full_n.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void array_FIFO::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_o_din\" :  \"" << d_o_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_o_full_n\" :  \"" << d_o_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_o_write\" :  \"" << d_o_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_i_dout\" :  \"" << d_i_dout.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_i_empty_n\" :  \"" << d_i_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"d_i_read\" :  \"" << d_i_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idx_address0\" :  \"" << idx_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idx_ce0\" :  \"" << idx_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idx_we0\" :  \"" << idx_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idx_d0\" :  \"" << idx_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"idx_q0\" :  \"" << idx_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idx_address1\" :  \"" << idx_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idx_ce1\" :  \"" << idx_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idx_we1\" :  \"" << idx_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"idx_d1\" :  \"" << idx_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"idx_q1\" :  \"" << idx_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

